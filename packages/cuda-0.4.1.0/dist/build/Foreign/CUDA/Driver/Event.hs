-- GENERATED by C->Haskell Compiler, version 0.16.3 Crystal Seed, 24 Jan 2009 (Haskell)
-- Edit the ORIGNAL .chs file instead!


{-# LINE 1 "./Foreign/CUDA/Driver/Event.chs" #-}{-# LANGUAGE CPP, ForeignFunctionInterface, EmptyDataDecls #-}
--------------------------------------------------------------------------------
-- |
-- Module    : Foreign.CUDA.Driver.Event
-- Copyright : (c) [2009..2011] Trevor L. McDonell
-- License   : BSD
--
-- Event management for low-level driver interface
--
--------------------------------------------------------------------------------

module Foreign.CUDA.Driver.Event (

  -- * Event Management
  Event, EventFlag(..), WaitFlag,
  create, destroy, elapsedTime, query, record, wait, block

) where


{-# LINE 22 "./Foreign/CUDA/Driver/Event.chs" #-}

-- Friends
import Foreign.CUDA.Internal.C2HS
import Foreign.CUDA.Driver.Error
import Foreign.CUDA.Driver.Stream               (Stream(..))

-- System
import Foreign
import Foreign.C
import Control.Monad                            (liftM)


--------------------------------------------------------------------------------
-- Data Types
--------------------------------------------------------------------------------

-- |
-- Events
--
newtype Event = Event { useEvent :: ((Ptr ()))}

-- |
-- Event creation flags
--
data EventFlag = Default
               | BlockingSync
               | DisableTiming
               | Interprocess
               deriving (Eq,Show)
instance Enum EventFlag where
  fromEnum Default = 0
  fromEnum BlockingSync = 1
  fromEnum DisableTiming = 2
  fromEnum Interprocess = 4

  toEnum 0 = Default
  toEnum 1 = BlockingSync
  toEnum 2 = DisableTiming
  toEnum 4 = Interprocess
  toEnum unmatched = error ("EventFlag.toEnum: Cannot match " ++ show unmatched)

{-# LINE 49 "./Foreign/CUDA/Driver/Event.chs" #-}

-- |
-- Possible option flags for waiting for events
--
data WaitFlag
instance Enum WaitFlag where


--------------------------------------------------------------------------------
-- Event management
--------------------------------------------------------------------------------

-- |
-- Create a new event
--
create :: [EventFlag] -> IO Event
create flags = resultIfOk =<< cuEventCreate flags

cuEventCreate :: [EventFlag] -> IO (Status, Event)
cuEventCreate a2 =
  alloca $ \a1' -> 
  let {a2' = combineBitMasks a2} in 
  cuEventCreate'_ a1' a2' >>= \res ->
  peekEvt  a1'>>= \a1'' -> 
  let {res' = cToEnum res} in
  return (res', a1'')
{-# LINE 70 "./Foreign/CUDA/Driver/Event.chs" #-}
  where peekEvt = liftM Event . peek


-- |
-- Destroy an event
--
destroy :: Event -> IO ()
destroy ev = nothingIfOk =<< cuEventDestroy ev

cuEventDestroy :: Event -> IO (Status)
cuEventDestroy a1 =
  let {a1' = useEvent a1} in 
  cuEventDestroy'_ a1' >>= \res ->
  let {res' = cToEnum res} in
  return (res')
{-# LINE 81 "./Foreign/CUDA/Driver/Event.chs" #-}


-- |
-- Determine the elapsed time (in milliseconds) between two events
--
elapsedTime :: Event -> Event -> IO Float
elapsedTime ev1 ev2 = resultIfOk =<< cuEventElapsedTime ev1 ev2

cuEventElapsedTime :: Event -> Event -> IO (Status, Float)
cuEventElapsedTime a2 a3 =
  alloca $ \a1' -> 
  let {a2' = useEvent a2} in 
  let {a3' = useEvent a3} in 
  cuEventElapsedTime'_ a1' a2' a3' >>= \res ->
  peekFloatConv  a1'>>= \a1'' -> 
  let {res' = cToEnum res} in
  return (res', a1'')
{-# LINE 93 "./Foreign/CUDA/Driver/Event.chs" #-}


-- |
-- Determines if a event has actually been recorded
--
query :: Event -> IO Bool
query ev =
  cuEventQuery ev >>= \rv ->
  case rv of
    Success  -> return True
    NotReady -> return False
    _        -> resultIfOk (rv,undefined)

cuEventQuery :: Event -> IO (Status)
cuEventQuery a1 =
  let {a1' = useEvent a1} in 
  cuEventQuery'_ a1' >>= \res ->
  let {res' = cToEnum res} in
  return (res')
{-# LINE 108 "./Foreign/CUDA/Driver/Event.chs" #-}


-- |
-- Record an event once all operations in the current context (or optionally
-- specified stream) have completed. This operation is asynchronous.
--
record :: Event -> Maybe Stream -> IO ()
record ev mst =
  nothingIfOk =<< case mst of
    Just st -> cuEventRecord ev st
    Nothing -> cuEventRecord ev (Stream nullPtr)

cuEventRecord :: Event -> Stream -> IO (Status)
cuEventRecord a1 a2 =
  let {a1' = useEvent a1} in 
  let {a2' = useStream a2} in 
  cuEventRecord'_ a1' a2' >>= \res ->
  let {res' = cToEnum res} in
  return (res')
{-# LINE 123 "./Foreign/CUDA/Driver/Event.chs" #-}


-- |
-- Makes all future work submitted to the (optional) stream wait until the given
-- event reports completion before beginning execution. Requires cuda-3.2.
--
wait :: Event -> Maybe Stream -> [WaitFlag] -> IO ()
wait ev mst flags =
  nothingIfOk =<< case mst of
    Just st -> cuStreamWaitEvent st ev flags
    Nothing -> cuStreamWaitEvent (Stream nullPtr) ev flags

cuStreamWaitEvent :: Stream -> Event -> [WaitFlag] -> IO (Status)
cuStreamWaitEvent a1 a2 a3 =
  let {a1' = useStream a1} in 
  let {a2' = useEvent a2} in 
  let {a3' = combineBitMasks a3} in 
  cuStreamWaitEvent'_ a1' a2' a3' >>= \res ->
  let {res' = cToEnum res} in
  return (res')
{-# LINE 143 "./Foreign/CUDA/Driver/Event.chs" #-}

-- |
-- Wait until the event has been recorded
--
block :: Event -> IO ()
block ev = nothingIfOk =<< cuEventSynchronize ev

cuEventSynchronize :: Event -> IO (Status)
cuEventSynchronize a1 =
  let {a1' = useEvent a1} in 
  cuEventSynchronize'_ a1' >>= \res ->
  let {res' = cToEnum res} in
  return (res')
{-# LINE 152 "./Foreign/CUDA/Driver/Event.chs" #-}


foreign import ccall unsafe "Foreign/CUDA/Driver/Event.chs.h cuEventCreate"
  cuEventCreate'_ :: ((Ptr (Ptr ())) -> (CUInt -> (IO CInt)))

foreign import ccall unsafe "Foreign/CUDA/Driver/Event.chs.h cuEventDestroy"
  cuEventDestroy'_ :: ((Ptr ()) -> (IO CInt))

foreign import ccall unsafe "Foreign/CUDA/Driver/Event.chs.h cuEventElapsedTime"
  cuEventElapsedTime'_ :: ((Ptr CFloat) -> ((Ptr ()) -> ((Ptr ()) -> (IO CInt))))

foreign import ccall unsafe "Foreign/CUDA/Driver/Event.chs.h cuEventQuery"
  cuEventQuery'_ :: ((Ptr ()) -> (IO CInt))

foreign import ccall unsafe "Foreign/CUDA/Driver/Event.chs.h cuEventRecord"
  cuEventRecord'_ :: ((Ptr ()) -> ((Ptr ()) -> (IO CInt)))

foreign import ccall unsafe "Foreign/CUDA/Driver/Event.chs.h cuStreamWaitEvent"
  cuStreamWaitEvent'_ :: ((Ptr ()) -> ((Ptr ()) -> (CUInt -> (IO CInt))))

foreign import ccall unsafe "Foreign/CUDA/Driver/Event.chs.h cuEventSynchronize"
  cuEventSynchronize'_ :: ((Ptr ()) -> (IO CInt))
