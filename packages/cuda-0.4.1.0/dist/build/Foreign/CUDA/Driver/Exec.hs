-- GENERATED by C->Haskell Compiler, version 0.16.3 Crystal Seed, 24 Jan 2009 (Haskell)
-- Edit the ORIGNAL .chs file instead!


{-# LINE 1 "./Foreign/CUDA/Driver/Exec.chs" #-}{-# LANGUAGE GADTs, CPP, ForeignFunctionInterface, EmptyDataDecls #-}
--------------------------------------------------------------------------------
-- |
-- Module    : Foreign.CUDA.Driver.Exec
-- Copyright : (c) [2009..2011] Trevor L. McDonell
-- License   : BSD
--
-- Kernel execution control for low-level driver interface
--
--------------------------------------------------------------------------------

module Foreign.CUDA.Driver.Exec (

  -- * Kernel Execution
  Fun(Fun), FunParam(..), FunAttribute(..), CacheConfig(..),
  requires, setBlockShape, setSharedSize, setParams, setCacheConfigFun,
  launch, launchKernel, launchKernel'

) where


{-# LINE 22 "./Foreign/CUDA/Driver/Exec.chs" #-}

-- Friends
import Foreign.CUDA.Internal.C2HS
import Foreign.CUDA.Driver.Error
import Foreign.CUDA.Driver.Stream               (Stream(..))
import Foreign.CUDA.Driver.Texture              (Texture(..))

-- System
import Foreign
import Foreign.C
import Data.Maybe
import Control.Monad                            (zipWithM_)


{-# DEPRECATED TArg "as of CUDA version 3.2" #-}
{-# DEPRECATED setBlockShape, setSharedSize, setParams, launch
      "use launchKernel instead" #-}


--------------------------------------------------------------------------------
-- Data Types
--------------------------------------------------------------------------------

-- |
-- A @__global__@ device function
--
newtype Fun = Fun { useFun :: ((Ptr ()))}


-- |
-- Function attributes
--
data FunAttribute = MaxKernelThreadsPerBlock
                  | SharedSizeBytes
                  | ConstSizeBytes
                  | LocalSizeBytes
                  | NumRegs
                  | PtxVersion
                  | BinaryVersion
                  | Max
                  deriving (Eq,Show)
instance Enum FunAttribute where
  fromEnum MaxKernelThreadsPerBlock = 0
  fromEnum SharedSizeBytes = 1
  fromEnum ConstSizeBytes = 2
  fromEnum LocalSizeBytes = 3
  fromEnum NumRegs = 4
  fromEnum PtxVersion = 5
  fromEnum BinaryVersion = 6
  fromEnum Max = 7

  toEnum 0 = MaxKernelThreadsPerBlock
  toEnum 1 = SharedSizeBytes
  toEnum 2 = ConstSizeBytes
  toEnum 3 = LocalSizeBytes
  toEnum 4 = NumRegs
  toEnum 5 = PtxVersion
  toEnum 6 = BinaryVersion
  toEnum 7 = Max
  toEnum unmatched = error ("FunAttribute.toEnum: Cannot match " ++ show unmatched)

{-# LINE 62 "./Foreign/CUDA/Driver/Exec.chs" #-}

-- |
-- Cache configuration preference
--
data CacheConfig = None
                 | Shared
                 | L1
                 | Equal
                 deriving (Eq,Show)
instance Enum CacheConfig where
  fromEnum None = 0
  fromEnum Shared = 1
  fromEnum L1 = 2
  fromEnum Equal = 3

  toEnum 0 = None
  toEnum 1 = Shared
  toEnum 2 = L1
  toEnum 3 = Equal
  toEnum unmatched = error ("CacheConfig.toEnum: Cannot match " ++ show unmatched)

{-# LINE 73 "./Foreign/CUDA/Driver/Exec.chs" #-}

-- |
-- Kernel function parameters
--
data FunParam where
  IArg :: !Int             -> FunParam
  FArg :: !Float           -> FunParam
  TArg :: !Texture         -> FunParam
  VArg :: Storable a => !a -> FunParam

instance Storable FunParam where
  sizeOf (IArg _)       = sizeOf (undefined :: CUInt)
  sizeOf (FArg _)       = sizeOf (undefined :: CFloat)
  sizeOf (VArg v)       = sizeOf v
  sizeOf (TArg _)       = 0

  alignment (IArg _)    = alignment (undefined :: CUInt)
  alignment (FArg _)    = alignment (undefined :: CFloat)
  alignment (VArg v)    = alignment v
  alignment (TArg _)    = 0

  poke p (IArg i)       = poke (castPtr p) i
  poke p (FArg f)       = poke (castPtr p) f
  poke p (VArg v)       = poke (castPtr p) v
  poke _ (TArg _)       = return ()


--------------------------------------------------------------------------------
-- Execution Control
--------------------------------------------------------------------------------

-- |
-- Returns the value of the selected attribute requirement for the given kernel
--
requires :: Fun -> FunAttribute -> IO Int
requires fn att = resultIfOk =<< cuFuncGetAttribute att fn

cuFuncGetAttribute :: FunAttribute -> Fun -> IO (Status, Int)
cuFuncGetAttribute a2 a3 =
  alloca $ \a1' -> 
  let {a2' = cFromEnum a2} in 
  let {a3' = useFun a3} in 
  cuFuncGetAttribute'_ a1' a2' a3' >>= \res ->
  peekIntConv  a1'>>= \a1'' -> 
  let {res' = cToEnum res} in
  return (res', a1'')
{-# LINE 114 "./Foreign/CUDA/Driver/Exec.chs" #-}


-- |
-- Specify the @(x,y,z)@ dimensions of the thread blocks that are created when
-- the given kernel function is launched.
--
setBlockShape :: Fun -> (Int,Int,Int) -> IO ()
setBlockShape fn (x,y,z) = nothingIfOk =<< cuFuncSetBlockShape fn x y z

cuFuncSetBlockShape :: Fun -> Int -> Int -> Int -> IO (Status)
cuFuncSetBlockShape a1 a2 a3 a4 =
  let {a1' = useFun a1} in 
  let {a2' = fromIntegral a2} in 
  let {a3' = fromIntegral a3} in 
  let {a4' = fromIntegral a4} in 
  cuFuncSetBlockShape'_ a1' a2' a3' a4' >>= \res ->
  let {res' = cToEnum res} in
  return (res')
{-# LINE 128 "./Foreign/CUDA/Driver/Exec.chs" #-}


-- |
-- Set the number of bytes of dynamic shared memory to be available to each
-- thread block when the function is launched
--
setSharedSize :: Fun -> Integer -> IO ()
setSharedSize fn bytes = nothingIfOk =<< cuFuncSetSharedSize fn bytes

cuFuncSetSharedSize :: Fun -> Integer -> IO (Status)
cuFuncSetSharedSize a1 a2 =
  let {a1' = useFun a1} in 
  let {a2' = cIntConv a2} in 
  cuFuncSetSharedSize'_ a1' a2' >>= \res ->
  let {res' = cToEnum res} in
  return (res')
{-# LINE 140 "./Foreign/CUDA/Driver/Exec.chs" #-}


-- |
-- On devices where the L1 cache and shared memory use the same hardware
-- resources, this sets the preferred cache configuration for the given device
-- function. This is only a preference; the driver is free to choose a different
-- configuration as required to execute the function.
--
-- Switching between configuration modes may insert a device-side
-- synchronisation point for streamed kernel launches.
--
setCacheConfigFun :: Fun -> CacheConfig -> IO ()
setCacheConfigFun fn pref = nothingIfOk =<< cuFuncSetCacheConfig fn pref

cuFuncSetCacheConfig :: Fun -> CacheConfig -> IO (Status)
cuFuncSetCacheConfig a1 a2 =
  let {a1' = useFun a1} in 
  let {a2' = cFromEnum a2} in 
  cuFuncSetCacheConfig'_ a1' a2' >>= \res ->
  let {res' = cToEnum res} in
  return (res')
{-# LINE 161 "./Foreign/CUDA/Driver/Exec.chs" #-}

-- |
-- Invoke the kernel on a size @(w,h)@ grid of blocks. Each block contains the
-- number of threads specified by a previous call to 'setBlockShape'. The launch
-- may also be associated with a specific 'Stream'.
--
launch :: Fun -> (Int,Int) -> Maybe Stream -> IO ()
launch fn (w,h) mst =
  nothingIfOk =<< case mst of
    Nothing -> cuLaunchGridAsync fn w h (Stream nullPtr)
    Just st -> cuLaunchGridAsync fn w h st

cuLaunchGridAsync :: Fun -> Int -> Int -> Stream -> IO (Status)
cuLaunchGridAsync a1 a2 a3 a4 =
  let {a1' = useFun a1} in 
  let {a2' = fromIntegral a2} in 
  let {a3' = fromIntegral a3} in 
  let {a4' = useStream a4} in 
  cuLaunchGridAsync'_ a1' a2' a3' a4' >>= \res ->
  let {res' = cToEnum res} in
  return (res')
{-# LINE 178 "./Foreign/CUDA/Driver/Exec.chs" #-}


-- |
-- Invoke a kernel on a @(gx * gy * gz)@ grid of blocks, where each block
-- contains @(tx * ty * tz)@ threads and has access to a given number of bytes
-- of shared memory. The launch may also be associated with a specific 'Stream'.
--
-- In 'launchKernel', the number of kernel parameters and their offsets and
-- sizes do not need to be specified, as this information is retrieved directly
-- from the kernel's image. This requires the kernel to have been compiled with
-- toolchain version 3.2 or later.
--
-- The alternative 'launchKernel'' will pass the arguments in directly,
-- requiring the application to know the size and alignment/padding of each
-- kernel parameter.
--
launchKernel, launchKernel'
    :: Fun                      -- ^ function to execute
    -> (Int,Int,Int)            -- ^ block grid dimension
    -> (Int,Int,Int)            -- ^ thread block shape
    -> Int                      -- ^ shared memory (bytes)
    -> Maybe Stream             -- ^ (optional) stream to execute in
    -> [FunParam]               -- ^ list of function parameters
    -> IO ()
launchKernel fn (gx,gy,gz) (tx,ty,tz) sm mst args
  = (=<<) nothingIfOk
  $ withMany withFP args
  $ \pa -> withArray pa
  $ \pp -> cuLaunchKernel fn gx gy gz tx ty tz sm st pp nullPtr
  where
    st = fromMaybe (Stream nullPtr) mst

    withFP :: FunParam -> (Ptr FunParam -> IO b) -> IO b
    withFP p f = case p of
      IArg v -> with' v (f . castPtr)
      FArg v -> with' v (f . castPtr)
      VArg v -> with' v (f . castPtr)
      TArg _ -> error "launchKernel: TArg is deprecated"

    -- can't use the standard 'with' because 'alloca' will pass an undefined
    -- dummy argument when determining 'sizeOf' and 'alignment', but sometimes
    -- instances in Accelerate need to evaluate this argument.
    --
    with' :: Storable a => a -> (Ptr a -> IO b) -> IO b
    with' val f =
      allocaBytes (sizeOf val) $ \ptr -> do
        poke ptr val
        f ptr


launchKernel' fn (gx,gy,gz) (tx,ty,tz) sm mst args
  = (=<<) nothingIfOk
  $ with bytes
  $ \pb -> withArray' args
  $ \pa -> withArray0 nullPtr [buffer, castPtr pa, size, castPtr pb]
  $ \pp -> cuLaunchKernel fn gx gy gz tx ty tz sm st nullPtr pp
  where
    buffer      = wordPtrToPtr 0x01     -- CU_LAUNCH_PARAM_BUFFER_POINTER
    size        = wordPtrToPtr 0x02     -- CU_LAUNCH_PARAM_BUFFER_SIZE
    bytes       = foldl (\a x -> a + sizeOf x) 0 args
    st          = fromMaybe (Stream nullPtr) mst

    -- can't use the standard 'withArray' because 'mallocArray' will pass
    -- 'undefined' to 'sizeOf' when determining how many bytes to allocate, but
    -- our Storable instance for FunParam needs to dispatch on each constructor,
    -- hence evaluating the undefined.
    --
    withArray' vals f =
      allocaBytes bytes $ \ptr -> do
        pokeArray ptr vals
        f ptr


cuLaunchKernel :: Fun -> Int -> Int -> Int -> Int -> Int -> Int -> Int -> Stream -> Ptr (Ptr FunParam) -> Ptr (Ptr ()) -> IO (Status)
cuLaunchKernel a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 =
  let {a1' = useFun a1} in 
  let {a2' = fromIntegral a2} in 
  let {a3' = fromIntegral a3} in 
  let {a4' = fromIntegral a4} in 
  let {a5' = fromIntegral a5} in 
  let {a6' = fromIntegral a6} in 
  let {a7' = fromIntegral a7} in 
  let {a8' = fromIntegral a8} in 
  let {a9' = useStream a9} in 
  let {a10' = castPtr a10} in 
  let {a11' = castPtr a11} in 
  cuLaunchKernel'_ a1' a2' a3' a4' a5' a6' a7' a8' a9' a10' a11' >>= \res ->
  let {res' = cToEnum res} in
  return (res')
{-# LINE 260 "./Foreign/CUDA/Driver/Exec.chs" #-}



--------------------------------------------------------------------------------
-- Kernel function parameters
--------------------------------------------------------------------------------

-- |
-- Set the parameters that will specified next time the kernel is invoked
--
setParams :: Fun -> [FunParam] -> IO ()
setParams fn prs = do
  zipWithM_ (set fn) offsets prs
  nothingIfOk =<< cuParamSetSize fn (last offsets)
  where
    offsets = scanl (\a b -> a + size b) 0 prs

    size (IArg _)    = sizeOf (undefined :: CUInt)
    size (FArg _)    = sizeOf (undefined :: CFloat)
    size (TArg _)    = 0
    size (VArg v)    = sizeOf v

    set f o (IArg v) = nothingIfOk =<< cuParamSeti f o v
    set f o (FArg v) = nothingIfOk =<< cuParamSetf f o v
    set f _ (TArg v) = nothingIfOk =<< cuParamSetTexRef f (-1) v
    set f o (VArg v) = with v $ \p -> (nothingIfOk =<< cuParamSetv f o p (sizeOf v))


cuParamSetSize :: Fun -> Int -> IO (Status)
cuParamSetSize a1 a2 =
  let {a1' = useFun a1} in 
  let {a2' = fromIntegral a2} in 
  cuParamSetSize'_ a1' a2' >>= \res ->
  let {res' = cToEnum res} in
  return (res')
{-# LINE 300 "./Foreign/CUDA/Driver/Exec.chs" #-}

cuParamSeti :: Fun -> Int -> Int -> IO (Status)
cuParamSeti a1 a2 a3 =
  let {a1' = useFun a1} in 
  let {a2' = fromIntegral a2} in 
  let {a3' = fromIntegral a3} in 
  cuParamSeti'_ a1' a2' a3' >>= \res ->
  let {res' = cToEnum res} in
  return (res')
{-# LINE 305 "./Foreign/CUDA/Driver/Exec.chs" #-}

cuParamSetf :: Fun -> Int -> Float -> IO (Status)
cuParamSetf a1 a2 a3 =
  let {a1' = useFun a1} in 
  let {a2' = fromIntegral a2} in 
  let {a3' = realToFrac a3} in 
  cuParamSetf'_ a1' a2' a3' >>= \res ->
  let {res' = cToEnum res} in
  return (res')
{-# LINE 310 "./Foreign/CUDA/Driver/Exec.chs" #-}

cuParamSetv :: Storable a => Fun -> Int -> Ptr a -> Int -> IO (Status)
cuParamSetv a1 a2 a3 a4 =
  let {a1' = useFun a1} in 
  let {a2' = fromIntegral a2} in 
  let {a3' = castPtr a3} in 
  let {a4' = fromIntegral a4} in 
  cuParamSetv'_ a1' a2' a3' a4' >>= \res ->
  let {res' = cToEnum res} in
  return (res')
{-# LINE 317 "./Foreign/CUDA/Driver/Exec.chs" #-}

cuParamSetTexRef :: Fun -> Int -> Texture -> IO (Status)
cuParamSetTexRef a1 a2 a3 =
  let {a1' = useFun a1} in 
  let {a2' = fromIntegral a2} in 
  let {a3' = useTexture a3} in 
  cuParamSetTexRef'_ a1' a2' a3' >>= \res ->
  let {res' = cToEnum res} in
  return (res')
{-# LINE 322 "./Foreign/CUDA/Driver/Exec.chs" #-}


foreign import ccall unsafe "Foreign/CUDA/Driver/Exec.chs.h cuFuncGetAttribute"
  cuFuncGetAttribute'_ :: ((Ptr CInt) -> (CInt -> ((Ptr ()) -> (IO CInt))))

foreign import ccall unsafe "Foreign/CUDA/Driver/Exec.chs.h cuFuncSetBlockShape"
  cuFuncSetBlockShape'_ :: ((Ptr ()) -> (CInt -> (CInt -> (CInt -> (IO CInt)))))

foreign import ccall unsafe "Foreign/CUDA/Driver/Exec.chs.h cuFuncSetSharedSize"
  cuFuncSetSharedSize'_ :: ((Ptr ()) -> (CUInt -> (IO CInt)))

foreign import ccall unsafe "Foreign/CUDA/Driver/Exec.chs.h cuFuncSetCacheConfig"
  cuFuncSetCacheConfig'_ :: ((Ptr ()) -> (CInt -> (IO CInt)))

foreign import ccall unsafe "Foreign/CUDA/Driver/Exec.chs.h cuLaunchGridAsync"
  cuLaunchGridAsync'_ :: ((Ptr ()) -> (CInt -> (CInt -> ((Ptr ()) -> (IO CInt)))))

foreign import ccall unsafe "Foreign/CUDA/Driver/Exec.chs.h cuLaunchKernel"
  cuLaunchKernel'_ :: ((Ptr ()) -> (CUInt -> (CUInt -> (CUInt -> (CUInt -> (CUInt -> (CUInt -> (CUInt -> ((Ptr ()) -> ((Ptr (Ptr ())) -> ((Ptr (Ptr ())) -> (IO CInt))))))))))))

foreign import ccall unsafe "Foreign/CUDA/Driver/Exec.chs.h cuParamSetSize"
  cuParamSetSize'_ :: ((Ptr ()) -> (CUInt -> (IO CInt)))

foreign import ccall unsafe "Foreign/CUDA/Driver/Exec.chs.h cuParamSeti"
  cuParamSeti'_ :: ((Ptr ()) -> (CInt -> (CUInt -> (IO CInt))))

foreign import ccall unsafe "Foreign/CUDA/Driver/Exec.chs.h cuParamSetf"
  cuParamSetf'_ :: ((Ptr ()) -> (CInt -> (CFloat -> (IO CInt))))

foreign import ccall unsafe "Foreign/CUDA/Driver/Exec.chs.h cuParamSetv"
  cuParamSetv'_ :: ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CUInt -> (IO CInt)))))

foreign import ccall unsafe "Foreign/CUDA/Driver/Exec.chs.h cuParamSetTexRef"
  cuParamSetTexRef'_ :: ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO CInt))))
