-- GENERATED by C->Haskell Compiler, version 0.16.3 Crystal Seed, 24 Jan 2009 (Haskell)
-- Edit the ORIGNAL .chs file instead!


{-# LINE 1 "./Foreign/CUDA/Runtime/Event.chs" #-}{-# LANGUAGE CPP, ForeignFunctionInterface, EmptyDataDecls #-}
--------------------------------------------------------------------------------
-- |
-- Module    : Foreign.CUDA.Driver.Event
-- Copyright : (c) [2009..2011] Trevor L. McDonell
-- License   : BSD
--
-- Event management for C-for-CUDA runtime environment
--
--------------------------------------------------------------------------------

module Foreign.CUDA.Runtime.Event (

  -- * Event Management
  Event, EventFlag(..), WaitFlag,
  create, destroy, elapsedTime, query, record, wait, block

) where


{-# LINE 21 "./Foreign/CUDA/Runtime/Event.chs" #-}

-- Friends
import Foreign.CUDA.Runtime.Error
import Foreign.CUDA.Runtime.Stream                      ( Stream(..), defaultStream )
import Foreign.CUDA.Internal.C2HS

-- System
import Foreign
import Foreign.C
import Control.Monad                                    ( liftM )
import Data.Maybe                                       ( fromMaybe )


--------------------------------------------------------------------------------
-- Data Types
--------------------------------------------------------------------------------

-- |
-- Events
--
newtype Event = Event { useEvent :: ((Ptr ()))}

-- |
-- Event creation flags
--
data EventFlag = BlockingSync
               deriving (Eq,Show)
instance Enum EventFlag where
  fromEnum BlockingSync = 1

  toEnum 1 = BlockingSync
  toEnum unmatched = error ("EventFlag.toEnum: Cannot match " ++ show unmatched)

{-# LINE 56 "./Foreign/CUDA/Runtime/Event.chs" #-}

-- |
-- Possible option flags for waiting for events
--
data WaitFlag
instance Enum WaitFlag where


--------------------------------------------------------------------------------
-- Event management
--------------------------------------------------------------------------------

-- |
-- Create a new event
--
create :: [EventFlag] -> IO Event
create flags = resultIfOk =<< cudaEventCreateWithFlags flags

cudaEventCreateWithFlags :: [EventFlag] -> IO (Status, Event)
cudaEventCreateWithFlags a2 =
  alloca $ \a1' -> 
  let {a2' = combineBitMasks a2} in 
  cudaEventCreateWithFlags'_ a1' a2' >>= \res ->
  peekEvt  a1'>>= \a1'' -> 
  let {res' = cToEnum res} in
  return (res', a1'')
{-# LINE 77 "./Foreign/CUDA/Runtime/Event.chs" #-}
  where peekEvt = liftM Event . peek


-- |
-- Destroy an event
--
destroy :: Event -> IO ()
destroy ev = nothingIfOk =<< cudaEventDestroy ev

cudaEventDestroy :: Event -> IO (Status)
cudaEventDestroy a1 =
  let {a1' = useEvent a1} in 
  cudaEventDestroy'_ a1' >>= \res ->
  let {res' = cToEnum res} in
  return (res')
{-# LINE 88 "./Foreign/CUDA/Runtime/Event.chs" #-}


-- |
-- Determine the elapsed time (in milliseconds) between two events
--
elapsedTime :: Event -> Event -> IO Float
elapsedTime ev1 ev2 = resultIfOk =<< cudaEventElapsedTime ev1 ev2

cudaEventElapsedTime :: Event -> Event -> IO (Status, Float)
cudaEventElapsedTime a2 a3 =
  alloca $ \a1' -> 
  let {a2' = useEvent a2} in 
  let {a3' = useEvent a3} in 
  cudaEventElapsedTime'_ a1' a2' a3' >>= \res ->
  peekFloatConv  a1'>>= \a1'' -> 
  let {res' = cToEnum res} in
  return (res', a1'')
{-# LINE 100 "./Foreign/CUDA/Runtime/Event.chs" #-}


-- |
-- Determines if a event has actually been recorded
--
query :: Event -> IO Bool
query ev =
  cudaEventQuery ev >>= \rv ->
  case rv of
    Success  -> return True
    NotReady -> return False
    _        -> resultIfOk (rv,undefined)

cudaEventQuery :: Event -> IO (Status)
cudaEventQuery a1 =
  let {a1' = useEvent a1} in 
  cudaEventQuery'_ a1' >>= \res ->
  let {res' = cToEnum res} in
  return (res')
{-# LINE 115 "./Foreign/CUDA/Runtime/Event.chs" #-}


-- |
-- Record an event once all operations in the current context (or optionally
-- specified stream) have completed. This operation is asynchronous.
--
record :: Event -> Maybe Stream -> IO ()
record ev mst =
  nothingIfOk =<< cudaEventRecord ev (maybe defaultStream id mst)

cudaEventRecord :: Event -> Stream -> IO (Status)
cudaEventRecord a1 a2 =
  let {a1' = useEvent a1} in 
  let {a2' = useStream a2} in 
  cudaEventRecord'_ a1' a2' >>= \res ->
  let {res' = cToEnum res} in
  return (res')
{-# LINE 128 "./Foreign/CUDA/Runtime/Event.chs" #-}


-- |
-- Makes all future work submitted to the (optional) stream wait until the given
-- event reports completion before beginning execution. Requires cuda-3.2.
--
wait :: Event -> Maybe Stream -> [WaitFlag] -> IO ()
wait ev mst flags =
  let st = fromMaybe defaultStream mst
  in  nothingIfOk =<< cudaStreamWaitEvent st ev flags

cudaStreamWaitEvent :: Stream -> Event -> [WaitFlag] -> IO (Status)
cudaStreamWaitEvent a1 a2 a3 =
  let {a1' = useStream a1} in 
  let {a2' = useEvent a2} in 
  let {a3' = combineBitMasks a3} in 
  cudaStreamWaitEvent'_ a1' a2' a3' >>= \res ->
  let {res' = cToEnum res} in
  return (res')
{-# LINE 147 "./Foreign/CUDA/Runtime/Event.chs" #-}

-- |
-- Wait until the event has been recorded
--
block :: Event -> IO ()
block ev = nothingIfOk =<< cudaEventSynchronize ev

cudaEventSynchronize :: Event -> IO (Status)
cudaEventSynchronize a1 =
  let {a1' = useEvent a1} in 
  cudaEventSynchronize'_ a1' >>= \res ->
  let {res' = cToEnum res} in
  return (res')
{-# LINE 156 "./Foreign/CUDA/Runtime/Event.chs" #-}


foreign import ccall unsafe "Foreign/CUDA/Runtime/Event.chs.h cudaEventCreateWithFlags"
  cudaEventCreateWithFlags'_ :: ((Ptr (Ptr ())) -> (CUInt -> (IO CInt)))

foreign import ccall unsafe "Foreign/CUDA/Runtime/Event.chs.h cudaEventDestroy"
  cudaEventDestroy'_ :: ((Ptr ()) -> (IO CInt))

foreign import ccall unsafe "Foreign/CUDA/Runtime/Event.chs.h cudaEventElapsedTime"
  cudaEventElapsedTime'_ :: ((Ptr CFloat) -> ((Ptr ()) -> ((Ptr ()) -> (IO CInt))))

foreign import ccall unsafe "Foreign/CUDA/Runtime/Event.chs.h cudaEventQuery"
  cudaEventQuery'_ :: ((Ptr ()) -> (IO CInt))

foreign import ccall unsafe "Foreign/CUDA/Runtime/Event.chs.h cudaEventRecord"
  cudaEventRecord'_ :: ((Ptr ()) -> ((Ptr ()) -> (IO CInt)))

foreign import ccall unsafe "Foreign/CUDA/Runtime/Event.chs.h cudaStreamWaitEvent"
  cudaStreamWaitEvent'_ :: ((Ptr ()) -> ((Ptr ()) -> (CUInt -> (IO CInt))))

foreign import ccall unsafe "Foreign/CUDA/Runtime/Event.chs.h cudaEventSynchronize"
  cudaEventSynchronize'_ :: ((Ptr ()) -> (IO CInt))
